//Source code generated by AppGPT (www.appgpt.tech)
import { Admin, Resource, CustomRoutes } from 'react-admin';
import { customDataProvider } from './dataProvider';
import fakeDataProvider from 'ra-data-fakerest';
import { Dashboard } from './dashboard';
import { authProvider, apInitialize } from './authProvider';
import { i18nProvider } from './i18nProvider';
import LoginPage, { Login } from './Login';
import data from './data';
import { playersList, playersCreate, playersEdit } from './resources/players';
import { rolesList, rolesCreate, rolesEdit } from './resources/roles';
import { tasksList, tasksCreate, tasksEdit } from './resources/tasks';
import {
  transformationsList,
  transformationsCreate,
  transformationsEdit,
} from './resources/transformations';
import {
  pokemonsList,
  pokemonsCreate,
  pokemonsEdit,
} from './resources/pokemons';
import {
  upgradesList,
  upgradesCreate,
  upgradesEdit,
} from './resources/upgrades';
import {
  ninjutsusList,
  ninjutsusCreate,
  ninjutsusEdit,
} from './resources/ninjutsus';
import {
  voteCallList,
  voteCallCreate,
  voteCallEdit,
} from './resources/voteCall';
import {
  charactersList,
  charactersCreate,
  charactersEdit,
} from './resources/characters';
import playersIcon from '@mui/icons-material/People';
import rolesIcon from '@mui/icons-material/People';
import tasksIcon from '@mui/icons-material/Assignment';
import transformationsIcon from '@mui/icons-material/Transform';
import pokemonsIcon from '@mui/icons-material/Pets';
import upgradesIcon from '@mui/icons-material/Upgrade';
import ninjutsusIcon from '@mui/icons-material/FlashOn';
import voteCallIcon from '@mui/icons-material/HowToVote';
import charactersIcon from '@mui/icons-material/People';
// SUPERTOKENS
import React from 'react';
import SuperTokens, {
  SuperTokensWrapper,
  getSuperTokensRoutesForReactRouterDom,
} from 'supertokens-auth-react';
import ThirdPartyPasswordless from 'supertokens-auth-react/recipe/thirdpartypasswordless';
import Session from 'supertokens-auth-react/recipe/session';
import { BrowserRouter, Routes, Route, Link } from 'react-router-dom';
import * as reactRouterDom from 'react-router-dom';
let sessionFn = Session.init();
SuperTokens.init({
  appInfo: {
    appName: import.meta.env.VITE_SUPERTOKENS_APPNAME,
    apiDomain: import.meta.env.VITE_BACKEND_DOMAIN,
    websiteDomain: import.meta.env.VITE_SUPERTOKENS_WEBSITEDOMAIN,
    apiBasePath: import.meta.env.VITE_BACKEND_APIPATH + '/auth',
    websiteBasePath: import.meta.env.VITE_SUPERTOKENS_WEBSITEBASEPATH,
  },
  recipeList: [
    ThirdPartyPasswordless.init({
      contactMethod: 'EMAIL',
      signInUpFeature: {
        providers: [
          ThirdPartyPasswordless.Github.init(),
          //ThirdPartyPasswordless.Google.init(),
          //ThirdPartyPasswordless.Facebook.init(),
          //ThirdPartyPasswordless.Apple.init(),
        ],
      },
    }),
    sessionFn,
  ],
});
apInitialize(Session);
// END SUPERTOKENS
let dataProvider: any;
if (import.meta.env.VITE_USE_BACKEND_DATA === 'true') {
  dataProvider = customDataProvider(
    import.meta.env.VITE_BACKEND_DOMAIN +
      import.meta.env.VITE_BACKEND_APIPATH +
      '/proxy',
  );
} else {
  dataProvider = fakeDataProvider(data.defaultData);
}

const App = () => (
  <SuperTokensWrapper>
    <BrowserRouter basename="/a1b5931da">
      <Admin
        authProvider={
          import.meta.env.VITE_ENVIRONMENT != 'DEV' ? authProvider : undefined
        }
        requireAuth
        loginPage={LoginPage}
        dataProvider={dataProvider}
        i18nProvider={i18nProvider}
        dashboard={Dashboard}
      >
        <Resource
          name="players"
          options={{ label: 'Players' }}
          list={playersList}
          create={playersCreate}
          edit={playersEdit}
          recordRepresentation="id"
          icon={playersIcon}
        />
        <Resource
          name="roles"
          options={{ label: 'Roles' }}
          list={rolesList}
          create={rolesCreate}
          edit={rolesEdit}
          recordRepresentation="id"
          icon={rolesIcon}
        />
        <Resource
          name="tasks"
          options={{ label: 'Tasks' }}
          list={tasksList}
          create={tasksCreate}
          edit={tasksEdit}
          recordRepresentation="id"
          icon={tasksIcon}
        />
        <Resource
          name="transformations"
          options={{ label: 'Transformations' }}
          list={transformationsList}
          create={transformationsCreate}
          edit={transformationsEdit}
          recordRepresentation="id"
          icon={transformationsIcon}
        />
        <Resource
          name="pokemons"
          options={{ label: 'Pokemons' }}
          list={pokemonsList}
          create={pokemonsCreate}
          edit={pokemonsEdit}
          recordRepresentation="id"
          icon={pokemonsIcon}
        />
        <Resource
          name="upgrades"
          options={{ label: 'Upgrades' }}
          list={upgradesList}
          create={upgradesCreate}
          edit={upgradesEdit}
          recordRepresentation="id"
          icon={upgradesIcon}
        />
        <Resource
          name="ninjutsus"
          options={{ label: 'Ninjutsus' }}
          list={ninjutsusList}
          create={ninjutsusCreate}
          edit={ninjutsusEdit}
          recordRepresentation="id"
          icon={ninjutsusIcon}
        />
        <Resource
          name="voteCall"
          options={{ label: 'Vote Call' }}
          list={voteCallList}
          create={voteCallCreate}
          edit={voteCallEdit}
          recordRepresentation="id"
          icon={voteCallIcon}
        />
        <Resource
          name="characters"
          options={{ label: 'Characters' }}
          list={charactersList}
          create={charactersCreate}
          edit={charactersEdit}
          recordRepresentation="id"
          icon={charactersIcon}
        />
        <CustomRoutes noLayout>
          {/*This renders the login UI on the /auth route*/}
          {getSuperTokensRoutesForReactRouterDom(reactRouterDom)}
          {/*Your app routes*/}
        </CustomRoutes>
      </Admin>
    </BrowserRouter>
  </SuperTokensWrapper>
);

export default App;
